<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ray="ray.*"
					   xmlns:ns1="*"
					   width="1024"
					   height="924"
					   backgroundColor="#BDB6B6"
					   addedToStage="init()"
					   frameRate="30">
	<fx:Style source="XHGameRoleEditor.css"/>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;

			import engine.animation.MovieManage;
			import engine.animation.loader.MovieLoad;
			import engine.animation.movie.Movie;
			import engine.animation.struct.Loadable;

			import flash.system.fscommand;

			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FileEvent;

			import ray.CtrlFile;

			private function init():void
			{
				MonsterDebugger.initialize(this);

				panel.addElement(loadUIC);
//				loadUIC.x=panel.width / 2;
//				loadUIC.y=panel.height * 2 / 3;
				loadUIC.width=panel.width;
				loadUIC.height=panel.height;
				loadUIC.graphics.beginFill(0xff0000);
				loadUIC.graphics.lineStyle(3);
				loadUIC.graphics.moveTo(loadUIC.width / 2, 0);
				loadUIC.graphics.lineTo(loadUIC.width / 2, loadUIC.height);
				loadUIC.graphics.endFill();
//				this.panel.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, function(e:NativeDragEvent):void
//				{
//					NativeDragManager.acceptDragDrop(panel);
//				});
//				this.panel.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, dropToSWFLoaderHandler);
				CtrlFile.instance.main_win=this;
				for (var m_i:int=1; m_i < 7; m_i++)
				{
					this["btnRef" + m_i].addEventListener(MouseEvent.CLICK, btnRefClickHandler);
				}
				loadContext.allowCodeImport=true;
				skinType=0;
//				mattrixFile(new File("app:/asset/Main_aureole.swf"), new File("app:/asset/Main_aureolexml.xml"));
				txtTitle=new TextField();
				txtTitle.text="拖动调整中线";
				txtTitle.border=true;
				txtTitle.width=txtTitle.textWidth + 2;
				txtTitle.height=txtTitle.textHeight + 3;
				txtTitle.selectable=false;
				aure=new aure_img() as Bitmap;
			}
			[Embed(source="asset/aure.png")]
			private var aure_img:Class;
			private var aure:Bitmap;
			private var txtTitle:TextField;

			private function btnRefClickHandler(e:MouseEvent):void
			{
				var m_num:int=int(e.target.id.replace("btnRef", ""));
				var btnName:String="txtOffset";
				if (m_num == 1)
				{
					btnName="txtFR";
				}
				else
				{
					m_num--;
				}
				for (var m_i:int=1; m_i < CtrlFile.instance.ACTION; m_i++)
				{
					this[btnName + (CtrlFile.instance.ACTION * (m_num - 1) + m_i)].text=this[btnName + (CtrlFile.instance.ACTION * (m_num - 1))].text;
				}
			}

			private function dispose():void
			{
				CtrlFile.instance.dispose(txtState);
//                SimpleCutPng.instance.dispose(txtState);
			}
			private var info:Array=[];

			private function stop():void
			{
				CtrlFile.instance.stop();
			}

			private function save():void
			{
				var txtCount:int=CtrlFile.instance.ACTION * CtrlFile.instance.DIRECT + CtrlFile.instance.ACTION;
				var txtInpu:TextInput=null;
//				var unconventionality:String="";
				while (txtCount > 0)
				{
					if (this.hasOwnProperty("txtOffset" + (txtCount - 1)) == false)
					{
						txtInpu=this["txtFR" + (CtrlFile.instance.ACTION * CtrlFile.instance.DIRECT + CtrlFile.instance.ACTION - txtCount)];
						if (txtInpu.text == "")
						{
							info[txtCount]=1;
//							unconventionality+="动作 D" + txtCount + ",没有填任跳帧信息\n";
						}
						else
						{
							info[txtCount]=txtInpu.text;
						}
					}
					else
					{
						txtInpu=this["txtOffset" + (txtCount - 1)];
						if (txtInpu.text == "")
						{
							info[txtCount]=[0, 0, 0, 0, 0];
//							unconventionality+="动作 D" + txtCount + ",没有填任何信息\n";
						}
						else
						{
							info[txtCount]=txtInpu.text.split(",");
//							if (info[txtCount].length < 5)
//							{
//								unconventionality+="动作 D" + txtCount + ",偏移信息不够5个\n";
//							}
						}
					}
					txtCount--;
				}
//				Alert.show(unconventionality + "\n是否返回修正?", "偏移数据有异常", Alert.YES | Alert.NO, null, closeHandler);
				CtrlFile.instance.startSave(info);
			}

			private function closeHandler(e:CloseEvent):void
			{
				if (e.detail == Alert.NO)
				{
					CtrlFile.instance.startSave(info);
				}
			}

			private function cleanOffset():void
			{
				var txtCount:int=CtrlFile.instance.ACTION;
				while (txtCount > 0)
				{
					this["txtOffset" + txtCount].text="";
					txtCount--;
				}
			}

			public var file:File=null;
			private var fileStream:FileStream=null;
			private var xml:XML=null;
			private var fileFilter:FileFilter=new FileFilter("选择一组对应的SWF和XML文件", "*.swf;*.xml");
			private var fileImgXMLFilter:FileFilter=new FileFilter("选择一组对应的SWF和XML文件", "*.png;*.xml");
			private var fileImgFilter:FileFilter=new FileFilter("选择一张图片做为背景", "*.png;*.jpg;*.gif");

			private function readOffset():void
			{
				if (file != null)
				{
					file=null;
					xml=null;
				}
				file=new File();
				file.addEventListener(Event.SELECT, fileSelectHandler);
				file.browseForOpen("选择一个角色信息文件:", [fileFilter]);
			}

			public function fileSelectHandler(e:Event=null):void
			{
				file.removeEventListener(Event.SELECT, fileSelectHandler);
				fileStream=new FileStream();
//				fileStream.open(file, FileMode.READ);
				fileStream.open(mainXMLFile, FileMode.READ);
				fileStream.position=0;
				xml=new XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();

				var nodeInfo:Object=null;
				var xmlList:XMLList=xml.act;
				var len:int=xmlList.length();
				var m_i:int=0;
				var curNum:int=0;
				while (m_i < len)
				{
					var xmlList1:XMLList=xmlList[m_i].direct;
					var len1:int=xmlList1.length();
					var m_i1:int=0;
					this["txtFR" + (int(xmlList[m_i].@m) - 1)].text=xmlList[m_i].@j;
					var objDirect:Object;
					var strDirect:String;
					while (m_i1 < len1)
					{
						objDirect=xmlList1[m_i1];
						this["txtOffset" + (int(xmlList[m_i].@m) + (int(objDirect.@m) - 1) * CtrlFile.instance.ACTION - 1)].text=objDirect.@x1 + "," + objDirect.@x2 + "," + objDirect.@y2 + "," + objDirect.@x3 + "," + objDirect.@y3;
						m_i1++;
					}
					m_i++;
				}
				currTxt=this["txtOffset0"];
				currTxtData=currTxt.text.split(",");
				currTxtData1=currTxt.text.split(",");
			}

			private function saveOffset():void
			{
				if (file != null)
				{
					var nodeInfo:Object=null;
					var xmlList:XMLList=xml.act;
					var len:int=xmlList.length();
					var m_i:int=0;
					var curNum:int=0;
					while (m_i < len)
					{
						var xmlList1:XMLList=xmlList[m_i].direct;
						var len1:int=xmlList1.length();
						var m_i1:int=0;
						xmlList[m_i].@j=this["txtFR" + (int(xmlList[m_i].@m) - 1)].text == "" ? "1" : this["txtFR" + +(int(xmlList[m_i].@m) - 1)].text;
						var objDirect:Object;
						var strDirect:String;
						var arrayFrame:Array;
						while (m_i1 < len1)
						{
							objDirect=xmlList1[m_i1];
							arrayFrame=this["txtOffset" + (int(xmlList[m_i].@m) + (int(objDirect.@m) - 1) * CtrlFile.instance.ACTION - 1)].text.split(",");
							objDirect.@x1=arrayFrame[0] == "" ? 0 : arrayFrame[0];
							objDirect.@x2=arrayFrame[1] == undefined ? 0 : arrayFrame[1];
							objDirect.@y2=arrayFrame[2] == undefined ? 0 : arrayFrame[2];
							objDirect.@x3=arrayFrame[3] == undefined ? 0 : arrayFrame[3];
							objDirect.@y3=arrayFrame[4] == undefined ? 0 : arrayFrame[4];
							m_i1++;
						}
						m_i++;
					}

					saveFille(mainPathXML, xml.toString());

					while (loadUIC.numChildren)
					{
						loadUIC.removeChildAt(0);
					}
					MovieLoad.instance.cleanAllBitmapdata();
					m_role=null;
					skinType=1;

					if (ridePathXML != "")
					{
						loadAllObject.push(2);
						loadAllObject.push(new File(ridePathSWF))
						loadAllObject.push(rideXMLFile);
					}
					if (waponPathXML != "")
					{
						loadAllObject.push(3);
						loadAllObject.push(new File(waponPathSWF))
						loadAllObject.push(waponXMLFile);
					}
					if (skillPathXML != "")
					{
						loadAllObject.push(4);
						loadAllObject.push(new File(skillPathSWF))
						loadAllObject.push(skillXMLFile);
					}

					mattrixFile(new File(mainPathSWF), mainXMLFile);
				}
			}
			private var loadAllObject:Array=[];

			private function saveFille(vPath:String, vContent:String):void
			{
				file=new File(vPath);
				fileStream=new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeUTFBytes(vContent);
				fileStream.close();
			}

			private function saveSkillXML():void
			{
				skillPosArray=txtSkillPos.text.split(",");
				for (var m_i:int=0; m_i < 16; m_i++)
				{
					skillXML.act[0].@["pos" + m_i]=skillPosArray[m_i];
				}
//				skillXML.act[0].@pos=txtSkillPos.text;
				if (skillPathXML != "")
					saveFille(skillPathXML, skillXML.toString());
			}
			private var loadContext:LoaderContext=new LoaderContext();
			private var loadUIC:UIComponent=new UIComponent();
			private var loader:Loader=new Loader();
			private var currSWF:File;
			private var currXML:File;

//			private var skillXMLPath:String;

			private function mattrixFile(fSWF:File, fXML:File):void
			{
//				if (skinType == 4)
//				{
//					skillXMLPath=fXML.nativePath;
//				}
				MovieManage.start(this.stage);
				currSWF=fSWF;
				currXML=fXML;
				fileStream=new FileStream();
				var byteArray:ByteArray=new ByteArray();
				fileStream.open(fSWF, FileMode.READ);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);
				fileStream.position=0;
				fileStream.readBytes(byteArray);
				loadContext.applicationDomain=new ApplicationDomain();
				loader.loadBytes(byteArray, loadContext);
				fileStream.close();
			}
			/**
			 * 中心点
			 * */
//			private var aureole:Movie;
			private var _aureole:Sprite;

//			/**
//			 * 翅膀
//			 * */
//			private var wing:Movie;
			private var skillXML:XML;

			private function loadCompleteHandler(e:Event):void
			{
				var loadable:Loadable=new Loadable();
				loadable.movieName=currSWF.nativePath.substring(currSWF.nativePath.lastIndexOf("\\") + 1);
				loadable.movie=loader.contentLoaderInfo.applicationDomain;
				var d_index:int=currSWF.nativePath.lastIndexOf("D");
				if (currSWF.nativePath.length - d_index > 7)
				{
					loadable.swfPath=currSWF.nativePath;
				}
				else
				{
					loadable.swfPath=currSWF.nativePath.substring(0, currSWF.nativePath.lastIndexOf("D")) + ".swf";
				}
				fileStream=new FileStream();
				fileStream.open(currXML, FileMode.READ);
				loadable.xml=new XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				if (skinType == 4)
				{
					skillXML=loadable.xml;
					txtFX.text=skillXML.act[0].@m;
					for (var m_i:int=0; m_i < 17; m_i++)
					{
						skillPosArray[m_i]=skillXML.act[0].@["pos" + m_i];
					}
//					txtSkillPos.text=skillXML.act[0].@pos;
					txtSkillPos.text=skillPosArray + "";
//					skillPosArray=txtSkillPos.text.split(",");
				}
				MovieLoad.instance.load(loadable);
				fileStream.close();
				swfXML[skinType - 1]=MovieLoad.instance.getMovie(loadable.movieName);
				showMode(swfXML);
				if (loadAllObject.length > 2)
				{
					skinType=loadAllObject.shift();
					mattrixFile(loadAllObject.shift() as File, loadAllObject.shift() as File);
				}
				else
				{
					loadAllObject=[];
				}
			}

			public function get aureole():Sprite
			{
				if (_aureole == null)
				{
					_aureole=getball();
				}
				if (!_aureole.hasEventListener(MouseEvent.MOUSE_DOWN))
				{
					_aureole.addEventListener(MouseEvent.MOUSE_DOWN, aureoleMouseDHandler);
				}
				return _aureole;
			}

			public function aureoleMouseDHandler(e:MouseEvent):void
			{
				aureole.addEventListener(MouseEvent.MOUSE_UP, aureoleMouseUHandler);
				aureole.startDrag();
			}

			public function aureoleMouseUHandler(e:MouseEvent):void
			{
				aureole.removeEventListener(MouseEvent.MOUSE_UP, aureoleMouseUHandler);

				currTxtData1[1]=aureole.x - m_role.x;
				currTxtData1[2]=aureole.y - m_role.y;

				//				aureole.x=m_role.x + m_role.bottomX - aureole.width / 2;
				//				aureole.y=m_role.y + m_role.bottomY + aureole.height / 2;

				currTxt.text=currTxtData1.toString();
				aureole.stopDrag();
			}

			public function skillMouseDHandler(e:MouseEvent):void
			{
				m_skill.addEventListener(MouseEvent.MOUSE_UP, skillMouseUHandler);
				m_skill.startDrag();
			}
			private var skillPosArray:Array=[];

			public function skillMouseUHandler(e:MouseEvent):void
			{
				m_skill.removeEventListener(MouseEvent.MOUSE_UP, skillMouseUHandler);
				skillPosArray[(directNum - 1) * 2]=int(m_skill.x - m_role.x) + "";
				skillPosArray[(directNum - 1) * 2 + 1]=int(m_skill.y - m_role.y) + "";
				txtSkillPos.text=skillPosArray + "";
//				currTxtData1[3]=wing.x;
//				currTxtData1[4]=wing.y;

//				currTxt.text=currTxtData1.toString();
				aureole.stopDrag();
			}

			private var actNum:int=1;

			private function offsetAct():void
			{
				if (++actNum > CtrlFile.instance.ACTION)
				{
					actNum=1;
				}
				btnAct.label="当前动作(" + actNum + ")";
				directNum=1;
				btnDirect.label="当前方向(" + directNum + ")";
				setActDirect();
			}
			private var directNum:int=1;

			private function offsetDirect():void
			{
				if (++directNum > 8)
				{
					directNum=1;
				}
				btnDirect.label="当前方向(" + directNum + ")";
				setActDirect();
			}

			private function setActDirect():void
			{
				if (m_role != null)
				{
					m_role.gotoAndPlay("D" + actNum + "F" + directNum);
					if (m_skill != null)
					{
						var m_angle:int=0;
						if (txtFX.text == "")
						{
							m_skill.gotoAndPlay("D" + actNum + "F" + directNum, null, 1);
						}
						else if (txtFX.text == "3")
						{
							m_skill.gotoAndPlay("D" + actNum + "F" + txtFX.text, null, 1);
							switch (directNum + "")
							{
								case "1":
									m_angle=270;
									break;
								case "2":
									m_angle=315;
									break;
								case "3":
									m_angle=0;
									break;
								case "4":
									m_angle=45;
									break;
								case "5":
									m_angle=90;
									break;
								case "6":
									m_angle=135;
									break;
								case "7":
									m_angle=180;
									break;
								case "8":
									m_angle=225;
									break;
							}
						}
						m_skill.rotation=m_angle;
						if (skillPosArray[(directNum - 1) * 2] != "" && skillPosArray[(directNum - 1) * 2] != null)
						{
							m_skill.x=int(skillPosArray[(directNum - 1) * 2]) + m_role.x;
						}
						if (skillPosArray[(directNum - 1) * 2 + 1] != "" && skillPosArray[(directNum - 1) * 2 + 1] != null)
						{
							m_skill.y=int(skillPosArray[(directNum - 1) * 2 + 1]) + m_role.y;
						}
					}
					currData();
				}
			}
			private var currTxtData:Array;
			private var currTxtData1:Array;
			private var currTxt:TextInput;

			private function currData():void
			{
				var m_direct:int=directNum;
				if (directNum == 6)
				{
					m_direct=4;
				}
				else if (directNum == 7)
				{
					m_direct=3;
				}
				else if (directNum == 8)
				{
					m_direct=2;
				}
				currTxt=this["txtOffset" + ((m_direct - 1) * CtrlFile.instance.ACTION + actNum - 1)];
				currTxtData=currTxt.text.split(",");
				currTxtData1=currTxt.text.split(",");

				m_role.x=loadUIC.width / 2;

				aureole.x=m_role.x + int(currTxtData[1]);
				aureole.y=m_role.y + int(currTxtData[2]);

				aure.x=m_role.x - aure.width / 2;
				aure.y=m_role.y - aure.height / 2;
//				if (wing != null)
//				{
//					wing.x=int(currTxtData1[3]);
//					wing.y=int(currTxtData1[4]);
//				}
				setTitleAureole(m_role);
			}
			/**
			 * 0  人物, 1 坐骑, 2 武器 3技能
			 **/
			private var swfXML:Vector.<Movie>=new Vector.<Movie>(4);
			public var skinType:int=0;

			protected function btnSkin1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				skinType=1;
				file=new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSWFSelectHandler);
				file.browseForOpenMultiple("选择人武文件:", [fileFilter]);
			}

			protected function btnSkin2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				skinType=2;
				file=new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSWFSelectHandler);
				file.browseForOpenMultiple("选择坐骑文件:", [fileFilter]);
			}

			protected function btnSkin3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				skinType=3;
				file=new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSWFSelectHandler);
				file.browseForOpenMultiple("选择武器文件:", [fileFilter]);
			}

			protected function btnSkin4_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				skinType=4;
				file=new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSWFSelectHandler);
				file.browseForOpenMultiple("选择技能文件:", [fileFilter]);
			}

			private var mainXMLFile:File;
			private var mainPathSWF:String="";
			private var mainPathXML:String="";

			private var rideXMLFile:File;
			private var ridePathSWF:String="";
			private var ridePathXML:String="";

			private var waponXMLFile:File;
			private var waponPathSWF:String="";
			private var waponPathXML:String="";

			private var skillXMLFile:File;
			private var skillPathSWF:String="";
			private var skillPathXML:String="";

			/**
			 *1 人武 2 坐骑 3武器 4技能
			 * */
			private function fileSWFSelectHandler(e:FileListEvent):void
			{
				switch (skinType)
				{
					case 1:
						if (e.files[0].url.indexOf(".xml") < 0)
						{
							mattrixFile(e.files[0], e.files[1]);
							mainXMLFile=e.files[1];
							mainPathSWF=e.files[0].nativePath;
							mainPathXML=e.files[1].nativePath;
						}
						else
						{
							mattrixFile(e.files[1], e.files[0]);
							mainXMLFile=e.files[0];
							mainPathSWF=e.files[1].nativePath;
							mainPathXML=e.files[0].nativePath;
						}
//						file=mainFile;
						fileSelectHandler();
						break;
					case 2:
						if (e.files[0].url.indexOf(".xml") < 0)
						{
							mattrixFile(e.files[0], e.files[1]);
							rideXMLFile=e.files[1];
							ridePathSWF=e.files[0].nativePath;
							ridePathXML=e.files[1].nativePath;
						}
						else
						{
							mattrixFile(e.files[1], e.files[0]);
							rideXMLFile=e.files[0];
							ridePathSWF=e.files[1].nativePath;
							ridePathXML=e.files[0].nativePath;
						}
						break;
					case 3:
						if (e.files[0].url.indexOf(".xml") < 0)
						{
							mattrixFile(e.files[0], e.files[1]);
							waponXMLFile=e.files[1];
							waponPathSWF=e.files[0].nativePath;
							waponPathXML=e.files[1].nativePath;
						}
						else
						{
							mattrixFile(e.files[1], e.files[0]);
							waponXMLFile=e.files[0];
							waponPathSWF=e.files[1].nativePath;
							waponPathXML=e.files[0].nativePath;
						}
						break;
					case 4:
						if (e.files[0].url.indexOf(".xml") < 0)
						{
							mattrixFile(e.files[0], e.files[1]);
							skillXMLFile=e.files[1];
							skillPathSWF=e.files[0].nativePath;
							skillPathXML=e.files[1].nativePath;
						}
						else
						{
							mattrixFile(e.files[1], e.files[0]);
							skillXMLFile=e.files[0];
							skillPathSWF=e.files[1].nativePath;
							skillPathXML=e.files[0].nativePath;
						}
						break;
				}
			}

			private var m_role:Movie;
			private var m_skill:Movie;
			private var roleHitBall:Sprite;

			private function showMode(m_movie:Vector.<Movie>):void
			{
				if (m_role == null)
				{
					m_role=m_movie[0];
				}
				if (m_role != null)
				{
					while (loadUIC.numChildren)
					{
						loadUIC.removeChildAt(0);
					}
					m_role.isMonster=true;
					m_role.play();
					m_role.mouseEnabled=false;

					m_role.x=loadUIC.width / 2;
					m_role.y=loadUIC.height * 2 / 3;

					aure.x=m_role.x - aure.width / 2;
					aure.y=m_role.y - aure.height / 2;

					roleHitBall=new Sprite();
					roleHitBall.addChild(txtTitle);

					var txtHP:TextField=new TextField();
//					txtHP.defaultTextFormat=new TextFormat(null,null,0xffffff);
					txtHP.text="99999/99999";

					roleHitBall.addChild(txtHP);

					txtHP.height=txtHP.textHeight;
					txtHP.x=-txtHP.textWidth / 2;
					txtHP.y=txtTitle.height;
					roleHitBall.graphics.beginFill(0xff0000);
					roleHitBall.graphics.drawRect(txtHP.x, txtHP.y + txtHP.textHeight + 5, txtHP.textWidth, 5);

					roleHitBall.x=m_role.x;
					roleHitBall.y=m_role.y - 130 - roleHitBall.height;

					roleHitBall.mouseChildren=false;
					if (!roleHitBall.hasEventListener(MouseEvent.MOUSE_DOWN))
					{
						roleHitBall.addEventListener(MouseEvent.MOUSE_DOWN, roleHitBallMouseDHandler);
					}

					txtTitle.x=-txtTitle.width / 2;

					m_role.mattrix(m_movie[2], 3);
					m_role.mattrix(m_movie[1], 1);
//					m_role.mattrix(m_movie[3], 3);

					if (m_movie[3] != null)
					{
						m_skill=m_movie[3];
						loadUIC.addChild(m_skill);
						m_skill.x=m_role.x;
						m_skill.y=m_role.y;
						m_skill.play();
//					}
//
//					wing=swfXML[2];
//					if (wing != null)
//					{

						if (!m_skill.hasEventListener(MouseEvent.MOUSE_DOWN))
						{
							m_skill.addEventListener(MouseEvent.MOUSE_DOWN, skillMouseDHandler);
						}
						m_skill.mouseEnabled=true;
//						m_role.mouseChildren=true;
					}
				}
				setActDirect();
			}

			public function roleHitBallMouseDHandler(e:MouseEvent):void
			{
				roleHitBall.addEventListener(MouseEvent.MOUSE_UP, roleHitBallMouseUHandler);
				if (m_role != null)
				{
					roleHitBall.startDrag();
				}
			}

			public function roleHitBallMouseUHandler(e:MouseEvent):void
			{
				roleHitBall.removeEventListener(MouseEvent.MOUSE_UP, roleHitBallMouseUHandler);
				m_role.x=roleHitBall.x;
				currTxtData1[0]=int(currTxtData[0]) + loadUIC.width / 2 - m_role.x;
				m_role.y=loadUIC.height * 2 / 3;
				currTxt.text=currTxtData1.toString();
				if (m_role != null)
				{
					roleHitBall.stopDrag();
				}
			}

			private function getball():Sprite
			{
				var m_sprite:Sprite=new Sprite();
				with (m_sprite.graphics)
				{
					m_sprite.graphics.beginFill(0xff00ff);
					m_sprite.graphics.drawCircle(0, 0, 10);
					m_sprite.graphics.endFill();
				}
				return m_sprite;
			}

//			private function setTitleAureole(p:Point, rect:Rectangle):void
			private function setTitleAureole(m_main:Movie):void
			{
				loadUIC.addChild(aureole);
				loadUIC.addChild(aure);
				loadUIC.addChild(m_role);
				loadUIC.addChild(roleHitBall);
			}

			protected function btnClean_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				while (loadUIC.numChildren)
				{
					loadUIC.removeChildAt(0);
				}

				for (var m_i:int=0; m_i < CtrlFile.instance.ACTION * CtrlFile.instance.DIRECT; m_i++)
				{
					this["txtOffset" + m_i].text="";
				}

				for (m_i=0; m_i < CtrlFile.instance.ACTION; m_i++)
				{
					this["txtFR" + m_i].text="";
				}
				if (m_role != null)
				{
					m_role.close();
					m_role=null;
				}
				for (var m_index:String in swfXML)
				{
					swfXML[m_index]=null;
				}
				MovieLoad.instance.cleanAllBitmapdata();
				System.gc();
			}
			[Bindable]
			private var panelBackgroundColor:uint=0xffffff;

			private function changeColor():void
			{
				panelBackgroundColor=colorPicker.selectedColor;
			}

			protected function btnPause_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (btnPP.label == "播放")
				{
					btnPP.label="暂停";
					if (m_role != null)
					{
						m_role.play();
						m_role.gotoAndPlay("D" + actNum + "F" + directNum);
					}
					if (m_skill != null && actNum == 3)
					{
						m_skill.play();
						m_role.gotoAndPlay("D" + actNum + "F" + directNum);
					}
				}
				else
				{
//					m_role.canPlayOneFrame=false;
					btnPP.label="播放";
					if (m_role != null)
					{
						m_role.stop();
					}
					if (m_skill != null)
					{
						m_skill.stop();
					}
				}
			}

			protected function btnPreviousFrame_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (m_role != null)
				{
//					m_role.canPlayOneFrame=true;
					m_role.previousFrame();
				}
				if (m_skill != null)
				{
					m_skill.previousFrame();
				}
			}

			protected function btnNextFrame_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (m_role != null)
				{
					m_role.forwardFrame();
				}
				if (m_skill != null)
				{
					m_skill.forwardFrame();
				}
			}
			private var panelBGImg:String="";

			protected function btnAtoBG_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (file != null)
				{
					file=null;
					xml=null;
				}
				file=new File();
				file.addEventListener(Event.SELECT, fileImgSelectHandler);
				file.browseForOpen("选择一个背景文件:", [fileImgFilter]);
			}
			private var imgLoader:Loader;
			private var urlRequest:URLRequest=new URLRequest();

			private function fileImgSelectHandler(e:Event):void
			{
				if (imgLoader == null)
				{
					imgLoader=new Loader();
					imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoadCompleteHandler);
				}
				urlRequest.url=file.nativePath;
				imgLoader.load(urlRequest);
			}

			private function imgLoadCompleteHandler(e:Event):void
			{
				bmf.source=imgLoader.content;
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				file=new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, fileLYHandler);
				file.browseForOpenMultiple("选择一个烈焰的信息文件:", [fileImgXMLFilter]);
			}

			private function fileLYHandler(e:FileListEvent):void
			{
				file.removeEventListener(FileListEvent.SELECT_MULTIPLE, fileLYHandler);

				var f_xml:File;
				var f_png:File;
				var f_name:String;
				if (e.files[0].url.indexOf(".xml") >= 0)
				{
					f_png=e.files[1];
					f_xml=e.files[0];
				}
				else if (e.files[0].url.indexOf(".png") >= 0)
				{
					f_png=e.files[0];
					f_xml=e.files[1];
				}
				else
				{
					return;
				}
				f_name=f_png.url.substring(f_png.url.lastIndexOf("/") + 1, f_png.url.lastIndexOf("."));

				fileStream=new FileStream();
				fileStream.open(f_xml, FileMode.READ);
				fileStream.position=0;
				var m_xml:XML=new XML(fileStream.readUTFBytes(fileStream.bytesAvailable));
				fileStream.close();

				var m_bytearray:ByteArray=new ByteArray();
				fileStream=new FileStream();
				fileStream.open(f_png, FileMode.READ);
				fileStream.position=0;
				fileStream.readBytes(m_bytearray);
				fileStream.close();

				var m_loader:Loader=new Loader();
				m_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, m_loadHandler);
				m_loader.loadBytes(m_bytearray);
				var m_bitmapData:BitmapData;
				function m_loadHandler(e:Event):void
				{
					m_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, m_loadHandler);
//					bmf.source=m_loader;
					m_bitmapData=new BitmapData(m_loader.width, m_loader.height);
					m_bitmapData.draw(m_loader);
					copyPng(m_xml, f_name, m_bitmapData);
				}
			}

			private function copyPng(m_xml:XML, f_name:String, m_bitmapData:BitmapData):void
			{
				var m_xml2:XML;
				for (var s:String in m_xml.a)
				{
					if (m_xml.a[s].@id == f_name)
					{
						m_xml2=m_xml.a[int(s)];
						break;
					}
				}
				if (m_xml2 != null)
				{
					//id="attack" frame="7" fps="10" width="73" height="101" dx="33" dy="83" 
					var posArray:Array=m_xml2.@data.split("|");
					var t:Timer=new Timer(100);
					t.addEventListener(TimerEvent.TIMER, movieHandler);
					t.start();
					var m_n:int=0;
					function movieHandler(e:TimerEvent):void
					{
						if (m_n >= posArray.length)
						{
							m_n=0;
						}
						//key:1,xx:77,yy:0,w:73,h:98,dx:51,dy:81
						var m_item:Array=posArray[m_n].split(",");
						var dic_item:Dictionary=new Dictionary();
						for each (var s:String in m_item)
						{
							dic_item[s.split(":")[0]]=s.split(":")[1];
						}
						var m_bmd:BitmapData=new BitmapData(dic_item.w, dic_item.h, true, 0x00ff00);
						m_bmd.copyPixels(m_bitmapData, new Rectangle(dic_item.xx, dic_item.yy, dic_item.w, dic_item.h), new Point(0, 0));
//						m_bitmap.bitmapData=m_bmd;
						bmf.source=m_bmd;
						bmf.x=200-dic_item.dx;
						bmf.y=200-dic_item.dy;
						m_n++;
					}
				}
			}
		]]>
	</fx:Script>
	<s:Image id="bgImg"
			 x="3"
			 y="1"
			 width="1021"
			 height="482"
			 scaleMode="stretch"
			 source="img/girl.png"/>
	<s:Button id="btnDispose"
			  x="332"
			  y="449"
			  width="108"
			  label="选择原始文件"
			  mouseDown="dispose()"/>
	<s:Button id="btnReadOffset"
			  x="96"
			  y="12"
			  width="82"
			  label="读取XML"
			  mouseDown="readOffset()"/>
	<s:Button id="btnSaveOffset"
			  x="193"
			  y="12"
			  width="82"
			  label="保存"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnClean"
			  x="291"
			  y="12"
			  width="82"
			  label="清除所有"
			  click="btnClean_clickHandler(event)"/>
	<s:Button id="btnRef2"
			  x="157"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnRef1"
			  x="77"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnRef3"
			  x="284"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnSave"
			  x="456"
			  y="450"
			  width="108"
			  label="开始裁剪图片"
			  mouseDown="save()"/>
	<s:Button id="btnDirect"
			  x="767"
			  y="418"
			  width="99"
			  label="调整方向"
			  mouseDown="offsetDirect()"/>
	<s:Button id="btnSkin3"
			  x="767"
			  y="396"
			  width="99"
			  label="导入武器"
			  click="btnSkin3_clickHandler(event)"/>
	<s:Button id="btnSkin4"
			  x="866"
			  y="395"
			  width="99"
			  label="导入自身技能"
			  click="btnSkin4_clickHandler(event)"/>
	<s:Button id="btnAct"
			  x="866"
			  y="418"
			  width="99"
			  label="调整动作"
			  mouseDown="offsetAct()"/>
	<s:Button id="btnAtoBG"
			  x="915"
			  y="440"
			  width="99"
			  label="自定背景义图"
			  click="btnAtoBG_clickHandler(event)"/>
	<s:TextArea id="txtState"
				x="767"
				y="119"
				width="239"
				height="253"
				editable="false"/>
	<s:Label x="726"
			 y="16"
			 width="298"
			 chromeColor="#171414"
			 fontFamily="Courier New"
			 fontWeight="normal"
			 text="注意:偏移值输入逗号时要用半角.&#xd;模型动作实际是5方向,偏移值为1至5&#xd;每个动作指定跳帧数,每个方向指定(X),中心(X,Y)&#xd;方向文本框内数据格式例:1,2,3,4,5"/>
	<s:Label x="9"
			 y="16"
			 width="70"
			 chromeColor="#171414"
			 fontFamily="Courier New"
			 fontWeight="normal"
			 text="输入偏移值:"/>
	<s:Label x="20"
			 y="82"
			 width="76"
			 height="12"
			 text="D1:待机"/>
	<s:TextInput id="txtOffset0"
				 x="134"
				 y="78"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="113"
			 width="76"
			 height="12"
			 text="D2:修炼"/>
	<s:TextInput id="txtOffset1"
				 x="134"
				 y="105"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="141"
			 width="76"
			 height="12"
			 text="D3:攻击1"/>
	<s:TextInput id="txtOffset2"
				 x="134"
				 y="133"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="168"
			 width="76"
			 height="12"
			 text="D4:攻击2"/>
	<s:TextInput id="txtOffset3"
				 x="134"
				 y="161"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="197"
			 width="76"
			 text="D5:跑步"/>
	<s:Label x="20"
			 y="223"
			 width="76"
			 text="D6:走路"/>
	<s:Label x="19"
			 y="312"
			 width="76"
			 text="D9:战斗待机"/>
	<s:TextInput id="txtOffset4"
				 x="134"
				 y="190"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset5"
				 x="134"
				 y="217"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="255"
			 width="76"
			 text="D7:死亡"/>
	<s:TextInput id="txtOffset6"
				 x="134"
				 y="247"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="284"
			 width="76"
			 text="D8:采集"/>
	<s:TextInput id="txtOffset7"
				 x="134"
				 y="277"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset8"
				 x="134"
				 y="306"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="340"
			 width="76"
			 text="D10:坐骑待机"/>
	<s:TextInput id="txtOffset9"
				 x="134"
				 y="334"
				 width="123"
				 height="22"/>
	<s:Label x="20"
			 y="370"
			 width="76"
			 text="D11:坐骑跑步"/>
	<s:Label x="20"
			 y="398"
			 width="76"
			 text="D12:攻击3"/>
	<s:Label x="20"
			 y="427"
			 width="76"
			 text="D13:受伤"/>
	<s:TextInput id="txtOffset10"
				 x="134"
				 y="363"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset13"
				 x="260"
				 y="78"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset14"
				 x="260"
				 y="105"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset15"
				 x="260"
				 y="133"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset16"
				 x="260"
				 y="161"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset17"
				 x="260"
				 y="190"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset18"
				 x="260"
				 y="217"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset19"
				 x="260"
				 y="247"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset20"
				 x="260"
				 y="277"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset21"
				 x="260"
				 y="306"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset22"
				 x="260"
				 y="334"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset23"
				 x="260"
				 y="363"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset24"
				 x="260"
				 y="392"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset26"
				 x="386"
				 y="78"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset27"
				 x="386"
				 y="106"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset28"
				 x="386"
				 y="133"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset29"
				 x="386"
				 y="161"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset30"
				 x="386"
				 y="190"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset31"
				 x="386"
				 y="217"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset32"
				 x="386"
				 y="247"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset33"
				 x="386"
				 y="277"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset34"
				 x="386"
				 y="306"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset35"
				 x="386"
				 y="334"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset36"
				 x="386"
				 y="363"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset37"
				 x="386"
				 y="391"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset39"
				 x="512"
				 y="78"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset40"
				 x="512"
				 y="105"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset41"
				 x="512"
				 y="133"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset42"
				 x="512"
				 y="161"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset43"
				 x="512"
				 y="190"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset44"
				 x="512"
				 y="217"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset45"
				 x="512"
				 y="247"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset46"
				 x="512"
				 y="277"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset47"
				 x="512"
				 y="306"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset48"
				 x="512"
				 y="334"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset49"
				 x="512"
				 y="363"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset50"
				 x="512"
				 y="391"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset52"
				 x="638"
				 y="78"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset53"
				 x="638"
				 y="105"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset54"
				 x="638"
				 y="133"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset55"
				 x="638"
				 y="161"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset56"
				 x="638"
				 y="190"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset57"
				 x="638"
				 y="217"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset58"
				 x="638"
				 y="247"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset59"
				 x="638"
				 y="277"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset60"
				 x="638"
				 y="306"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset61"
				 x="638"
				 y="334"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset62"
				 x="638"
				 y="363"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset63"
				 x="638"
				 y="391"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset64"
				 x="638"
				 y="417"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset51"
				 x="512"
				 y="417"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset38"
				 x="386"
				 y="417"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset25"
				 x="260"
				 y="417"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtOffset12"
				 x="134"
				 y="417"
				 width="123"
				 height="22"/>
	<s:TextInput id="txtFR0"
				 x="98"
				 y="78"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR1"
				 x="98"
				 y="105"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR2"
				 x="98"
				 y="133"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR3"
				 x="98"
				 y="161"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR4"
				 x="98"
				 y="190"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR5"
				 x="98"
				 y="217"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR6"
				 x="98"
				 y="247"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR7"
				 x="98"
				 y="277"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR8"
				 x="98"
				 y="306"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR9"
				 x="98"
				 y="334"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR10"
				 x="98"
				 y="363"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR11"
				 x="99"
				 y="391"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtFR12"
				 x="99"
				 y="417"
				 width="28"
				 height="22"/>
	<s:TextInput id="txtOffset11"
				 x="134"
				 y="391"
				 width="123"
				 height="22"/>
	<s:Panel id="panel"
			 x="8"
			 y="491"
			 width="1006"
			 height="426"
			 backgroundColor="{panelBackgroundColor}"
			 borderVisible="false"
			 dropShadowVisible="true"
			 enabled="true"
			 textAlign="center"
			 title="模型展示区域"
			 mouseDown="changeColor()">
		<s:Rect width="100%"
				height="100%">
			<s:fill>
				<s:BitmapFill id="bmf"
							  fillMode="clip"/>
			</s:fill>
		</s:Rect>
	</s:Panel>
	<s:Button id="btnSkin1"
			  x="767"
			  y="374"
			  width="99"
			  label="导入主模型"
			  click="btnSkin1_clickHandler(event)"/>
	<s:Button id="btnSkin2"
			  x="866"
			  y="373"
			  width="99"
			  label="导入坐骑"
			  click="btnSkin2_clickHandler(event)"/>
	<s:Button id="btnPP"
			  x="968"
			  y="373"
			  width="46"
			  label="暂停"
			  click="btnPause_clickHandler(event)"/>
	<s:Button id="btnPreviousFrame"
			  x="968"
			  y="396"
			  width="46"
			  label="上帧"
			  click="btnPreviousFrame_clickHandler(event)"/>
	<s:Button id="btnNextFrame"
			  x="968"
			  y="419"
			  width="46"
			  label="下帧"
			  click="btnNextFrame_clickHandler(event)"/>
	<s:Label x="94"
			 y="36"
			 text="跳帧数"/>
	<s:Label x="170"
			 y="36"
			 text="方向1"/>
	<s:Label x="301"
			 y="36"
			 text="方向2"/>
	<s:Label x="427"
			 y="36"
			 text="方向3"/>
	<s:Label x="550"
			 y="36"
			 text="方向4"/>
	<s:Label x="673"
			 y="36"
			 text="方向5"/>
	<s:Button id="btnRef4"
			  x="412"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnRef5"
			  x="532"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:Button id="btnRef6"
			  x="656"
			  y="52"
			  width="68"
			  label="应用本列"
			  mouseDown="saveOffset()"/>
	<s:TextInput id="txtSkillPos"
				 x="820"
				 y="93"
				 width="131"/>
	<s:Label x="825"
			 y="77"
			 text="技能位置"/>
	<s:TextInput id="txtFX"
				 x="768"
				 y="93"
				 width="43"/>
	<s:Label x="767"
			 y="78"
			 text="技能方向"/>
	<s:Button id="btnSaveSkill"
			  x="961"
			  y="93"
			  width="44"
			  label="保存"
			  mouseDown="saveSkillXML()"/>
	<mx:ColorPicker id="colorPicker"
					x="891"
					y="440"
					change="changeColor()"
					selectedColor="#FFFFFF"
					toolTip="自定义背景色"/>
	<s:Button x="915"
			  y="9"
			  label="加载烈焰动画"
			  click="button1_clickHandler(event)"/>
</s:WindowedApplication>
